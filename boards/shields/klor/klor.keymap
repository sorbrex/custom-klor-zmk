
//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.qh>
#include <dt-bindings/zmk/ext_power.h>

#define ALPHA  0
#define SYMBOL 1
#define FUNC   2
#define ADJUST 3

//Sample Keymap that will work as 'barebones' and out of the box.
//Starting point for your own


/ {
    keymap {
      compatible = "zmk,keymap";
      alpha_layer {
        label= "ALPHA";
        bindings = <
                  &kp Q     &kp W     &kp E     &kp R     &kp T                          &kp Y     &kp U     &kp I     &kp O     &kp P
                  &kp A     &kp S     &kp D     &kp F     &kp G                          &kp H     &kp J     &kp K     &kp L     &kp COMMA
                  &kp Z     &kp X     &kp C     &kp V     &kp B  &kp C_MUTE   &kp C_MUTE &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH 
                                      &kp LCTRL &kp LGUI  &mo SYMBOL                     &kp RET  &mo FUNC &kp BSPC
        >;
        sensor-bindings = < 
          &inc_dec_kp C_VOL_UP C_VOL_DN 
          &inc_dec_kp C_VOL_UP C_VOL_DN
        >;
      };

      symbol_layer {
        label= "SYMBOL";
        bindings = <
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans     
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans  
                  &trans &trans &trans &trans &trans   &trans   &trans   &trans &trans &trans &trans &trans
                                &trans &trans &trans                     &trans &trans &trans
        >;
        sensor-bindings = < 
          &inc_dec_kp C_VOL_UP C_VOL_DN 
          &inc_dec_kp C_VOL_UP C_VOL_DN
        >;
      };

      func_layer {
        label= "FUNC";
        bindings = <
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans     
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans  
                  &trans &trans &trans &trans &trans   &trans   &trans   &trans &trans &trans &trans &trans
                                &trans &trans &trans                     &trans &trans &trans
        >;
        sensor-bindings = < 
          &inc_dec_kp C_VOL_UP C_VOL_DN 
          &inc_dec_kp C_VOL_UP C_VOL_DN
        >;
      };

      adjust_layer {
        label= "ADJUST";
        bindings = <
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans     
                  &trans &trans &trans &trans &trans                     &trans &trans &trans &trans &trans  
                  &trans &trans &trans &trans &trans   &trans   &trans   &trans &trans &trans &trans &trans
                                &trans &trans &trans                     &trans &trans &trans
        >;
        sensor-bindings = < 
          &inc_dec_kp C_VOL_UP C_VOL_DN 
          &inc_dec_kp C_VOL_UP C_VOL_DN
        >;
      };
    };
};